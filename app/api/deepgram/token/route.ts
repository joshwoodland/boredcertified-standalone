/**
 * @file app/api/deepgram/token/route.ts
 * @description Server-side API route for generating temporary Deepgram API tokens
 * This endpoint securely accesses the Deepgram API key from server-side environment
 * variables and generates a temporary token that can be used by the client.
 *
 * Uses the Deepgram Token-based Auth API:
 * https://developers.deepgram.com/docs/token-based-authentication
 */

import { NextRequest, NextResponse } from 'next/server';

// Set dynamic to force-dynamic to prevent caching
export const dynamic = 'force-dynamic';

/**
 * GET handler for generating a Deepgram API token
 *
 * @param request The incoming request
 * @returns A response containing the generated token or an error
 */
export async function GET(request: NextRequest) {
  try {
    // Get TTL from query params or use default (1 hour)
    const ttlParam = request.nextUrl.searchParams.get('ttl');
    const requestedTtl = ttlParam ? parseInt(ttlParam, 10) : 3600;

    // Get the Deepgram API key from environment variables
    const deepgramApiKey = process.env.DEEPGRAM_API_KEY;

    // Check if the API key is available
    if (!deepgramApiKey) {
      console.error('[DEEPGRAM TOKEN API] Missing Deepgram API key');
      return NextResponse.json(
        { error: 'Deepgram API configuration error' },
        { status: 500 }
      );
    }

    console.log('[DEEPGRAM TOKEN API] Generating temporary token');

    // Generate a temporary token using the Deepgram API
    // We'll use the project keys endpoint which is more reliable
    // First, get the projects
    const projectsResponse = await fetch('https://api.deepgram.com/v1/projects', {
      method: 'GET',
      headers: {
        'Authorization': `Token ${deepgramApiKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (!projectsResponse.ok) {
      const errorText = await projectsResponse.text();
      console.error('[DEEPGRAM TOKEN API] Error getting projects:', projectsResponse.status, errorText);
      return NextResponse.json(
        {
          error: 'Failed to get Deepgram projects',
          details: `Deepgram API responded with status ${projectsResponse.status}`,
          responseText: errorText
        },
        { status: projectsResponse.status }
      );
    }

    // Parse the projects response
    let projectsData;
    try {
      projectsData = await projectsResponse.json();
    } catch (parseError) {
      console.error('[DEEPGRAM TOKEN API] Error parsing projects response:', parseError);
      return NextResponse.json(
        {
          error: 'Failed to parse Deepgram projects response',
          details: parseError instanceof Error ? parseError.message : 'Unknown error'
        },
        { status: 500 }
      );
    }

    // Get the first project ID
    if (!projectsData.projects || projectsData.projects.length === 0) {
      console.error('[DEEPGRAM TOKEN API] No projects found');
      return NextResponse.json(
        {
          error: 'No Deepgram projects found',
          details: 'The API key does not have access to any projects'
        },
        { status: 404 }
      );
    }

    const projectId = projectsData.projects[0].project_id;
    console.log(`[DEEPGRAM TOKEN API] Using project ID: ${projectId}`);

    // Now create a temporary API key for this project
    const response = await fetch(`https://api.deepgram.com/v1/projects/${projectId}/keys`, {
      method: 'POST',
      headers: {
        'Authorization': `Token ${deepgramApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: `temp-key-${Date.now()}`,
        time_to_live_in_seconds: requestedTtl, // Use the requested TTL
        scopes: ['usage:write'],
        comment: 'Generated by BoredCertified app for client-side use'
      })
    });

    // Check if the response is OK before parsing JSON
    if (!response.ok) {
      const errorText = await response.text();
      console.error('[DEEPGRAM TOKEN API] Error response from Deepgram:', response.status, errorText);
      return NextResponse.json(
        {
          error: 'Failed to generate Deepgram token',
          details: `Deepgram API responded with status ${response.status}`,
          responseText: errorText
        },
        { status: response.status }
      );
    }

    // Parse the response
    let data;
    try {
      const responseText = await response.text();
      console.log('[DEEPGRAM TOKEN API] Response text:', responseText);
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error('[DEEPGRAM TOKEN API] Error parsing JSON response:', parseError);
      return NextResponse.json(
        {
          error: 'Failed to parse Deepgram response',
          details: parseError instanceof Error ? parseError.message : 'Unknown error'
        },
        { status: 500 }
      );
    }

    // Verify the data contains a key
    if (!data.key) {
      console.error('[DEEPGRAM TOKEN API] Response missing key:', data);
      return NextResponse.json(
        { error: 'Invalid response from Deepgram', details: 'Response did not contain a key' },
        { status: 500 }
      );
    }

    console.log('[DEEPGRAM TOKEN API] Successfully generated token');

    // Return the token and expiration time to the client
    return NextResponse.json({
      token: data.key,
      expiresIn: requestedTtl // Use the requested TTL
    });
  } catch (error) {
    // Log the error
    console.error('[DEEPGRAM TOKEN API] Error generating token:', error);

    // Return a generic error message to the client
    return NextResponse.json(
      {
        error: 'Internal server error',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
